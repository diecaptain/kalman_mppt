#!/usr/bin/perl -w
#kalman filter algorithm
#inputs are Zin,Vin,Vref
#outputs are Vout,Zout,k
$M = 0.05; #Value of M
$Q = 0.01; #Value of Q
$R = 0.0001; #value of R
$Vin = 21; #initial estimate of input voltage
$Zin = 0.99; #initial estimate of input error
chomp(@Vref = <STDIN>);
print "\n the reference voltage array is : \n @Vref \n\n";
$n = @Vref;
chomp(@Iref = <STDIN>);
print "\n the reference current array is : \n @Iref \n\n";
for ( $j = 0;$j < $n; $j++ ) 
  {
   $P[$j] = $Vref[$j] * $Iref[$j]; #Power array is calculated here
  }
print "\n the reference power array is : \n @P \n\n";
####################################################
################# Kalman algorithm #################
####################################################
for ( $i = 0;$i < $n;$i++ )
  { 
      $h = $i - 1;
   if ( $i == '0' )
    {
      $Zcap[$i] = $Zin + $Q; # Priori error probability projectile
      $temp1 = $P[$i];
      $temp2 = $Vref[$i];
      $U[$i] = $temp1/$temp2;
      $Vcap[$i] = $Vin + $M * $U[$i]; # priori voltage estimate
      $k[$i] = $Zcap[$i] / ($Zcap[$i] + $R); # Kalman gain
      $V[$i] = $Vcap[$i] + ($k[$i] * ($Vref[$i] - $Vcap[$i])); #Output kalman voltage estimate 
      $Z[$i] = ((1 - $k[$i]) * $Zcap[$i]);
      }
      elsif ( $i > '0' )
          {
           $Zcap[$i] = $Zin + $Q; # Priori error probability projectile
           $temp1 = $P[$i]-$P[$h];
           $temp2 = $Vref[$i]-$Vref[$h];
           $U[$i] = $temp1/$temp2;
           $Vcap[$i] = $Vin + $M * $U[$i]; # priori voltage estimate
           $k[$i] = $Zcap[$i] / ($Zcap[$i] + $R); # Kalman gain
           $V[$i] = $Vcap[$i] + ($k[$i] * ($Vref[$i] - $Vcap[$i])); #Output kalman voltage estimate 
           $Z[$i] = ((1 - $k[$i]) * $Zcap[$i])
            }
             }
              print "The kalman gain for the experiment is : \n @k \n\n";
              print "The output voltage of the algorithm is : \n @V \n\n";
              print "The output error probability is  : \n @Z \n\n"; 
              print "The output power array is : \n";
              for ( $x = 0;$x < $n;$x++ )
                {
                 $Pm[$x] = $V[$x] * $Iref[$x]; #MPPT power
                }
              print "\n @Pm \n\n";
#####################################################################
################ Kalman Optimal Conditions ##########################
#####################################################################
$Vopt = 21;
print "\nThe optimal voltage is : $Vopt \n";
chomp(@Iopt = <STDIN>);
print "The optimal current array is : @Iopt \n";
$q = @Iopt;
for ( $l = 0;$l < $q; $l++ ) 
  {
   $Popt[$l] = $Vopt * $Iopt[$l]; #Power array is calculated here
  }
print "\n the optimal reference power array is : \n @Popt \n\n";
for ( $y = 0;$y < $q;$y++ )
  { 
      $g = $y - 1;
   if ( $y == '0' )
     {
      $Zcapopt[$y] = $Zin + $Q; # Priori error probability projectile
      #$temp1 = $P[$y];
      #$temp2 = $Vref[$y];
      $Uopt[$y] = $Iopt[$y];
      $Vcapopt[$y] = $Vin + $M * $Uopt[$y]; # priori voltage estimate
      $kopt[$y] = $Zcapopt[$y] / ($Zcapopt[$y] + $R); # Kalman gain
      $Vo[$y] = $Vcapopt[$y] + ($kopt[$y] * ($Vopt - $Vcapopt[$y])); #Output kalman voltage estimate 
      $Zopt[$y] = ((1 - $kopt[$y]) * $Zcapopt[$y]);
      }
       elsif ( $y > '0' )
          {
           $Zcapopt[$y] = $Zin + $Q; # Priori error probability projectile
           #$temp1 = $P[$y];
           #$temp2 = $Vref[$y];
           $Uopt[$y] = $Iopt[$y]-$Iopt[$g];
           $Vcapopt[$y] = $Vo[$g] + $M * $Uopt[$y]; # priori voltage estimate
           $kopt[$y] = $Zcapopt[$y] / ($Zcapopt[$y] + $R); # Kalman gain
           $Vo[$y] = $Vcapopt[$y] + ($kopt[$y] * ($Vopt - $Vcapopt[$y])); #Output kalman voltage estimate 
           $Zopt[$y] = ((1 - $kopt[$y]) * $Zcapopt[$y]);
           }
          }
              print "The optimal kalman gain for the experiment is : \n @kopt \n\n";
              print "The output optimal voltage of the algorithm is : \n @Vo \n\n";
              print "The output optimal  error probability is  : \n @Zopt \n\n"; 
              print "The output optimal power array is : \n";
              for ( $w = 0;$w < $q;$w++ )
                {
                 $Pmopt[$w] = $Vo[$w] * $Iopt[$w]; # optimal MPPT power
                }
              print "\n @Pmopt \n\n";
              print "That's all folks!!!\n" 
    
   
